apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue
spec:
  selector:
    matchLabels:
      app: queue
  replicas: 1
  template:  # Template for the POD
    metadata:
      labels:
        app: queue
    spec:
      containers:
        - name: queue
          image: rmohr/activemq
          resources:
            requests:
              memory: 300Mi # 1Mi ==> 1024 Ki  |   1Ki ==>
              cpu: 50m              # 1M  ==> 1000K    |   1K  ==> 1000 bytes
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: position-simulator
spec:
  selector:
    matchLabels:
      app: position-simulator
  replicas: 1
  template:  # Template for the POD
    metadata:
      labels:
        app: position-simulator
    spec:
      containers:
        - name: position-simulator
          image: neerajjain/positionsimulator:resource_tuned
          volumeMounts:
            - mountPath: /tmp/not-started
              name: not-started-volume
            - mountPath: /tmp/started
              name: started-volume
            - mountPath: /tmp/finished
              name: finished-volume
          envFrom:
            - configMapRef:
                name: spring-application-config

      volumes:
        - name: not-started-volume
          hostPath:
            path: /tmp/position_tracker/not-started
        - name: started-volume
          hostPath:
            path: /tmp/position_tracker/started
        - name: finished-volume
          hostPath:
            path: /tmp/position_tracker/finished
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
spec:
  selector:
    matchLabels:
      app: database
  replicas: 1
  template:  # Template for the POD
    metadata:
      labels:
        app: database
    spec:
      containers:
        - name: database
          image: mongo
          volumeMounts:
            - mountPath: /data/db
              name: mongo-persistent-storage
      volumes:
        - name: mongo-persistent-storage
          # Pointer to the configuration of How we want the mount to be implemented, So we are using Persistent Volume Claims.
          persistentVolumeClaim:
            claimName: mongo-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tracker
spec:
  selector:
    matchLabels:
      app: tracker
  replicas: 1
  template: # template for the POD
    metadata:
      labels:
        app: tracker
    spec:
      containers:
        - name: tracker
          image: neerajjain/positiontracker
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: production-microservice
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eureka
spec:
  selector:
    matchLabels:
      app: eureka
  replicas: 1
  template:
    metadata:
      labels:
        app: eureka
    spec:
      containers:
        - name: eureka
          image: neerajjain/eureka
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
spec:
  selector:
    matchLabels:
      app: gateway
  replicas: 1
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
        - name: gateway
          image: neerajjain/position_tracker_api_gateway:cpu_intensive_task-1
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: production-microservice
          readinessProbe:
            httpGet:
              path: /
              port: 8080
          resources:
            requests:
              memory: 200Mi # 1Mi ==> 1024 Ki  |   1Ki ==>              
              cpu: 50m
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
spec:
  selector:
    matchLabels:
      app: webapp
  replicas: 1
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
        - name: webapp
          image: neerajjain/position-tracker-webapp
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: production-microservice
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trip-directions
spec:
  selector:
    matchLabels:
      app: trip-directions
  template:
    metadata:
      labels:
        app: trip-directions
    spec:
      containers:
        - name: trip-directions
          image: neerajjain/trip-directions
          env:
            - name: GOOGLE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: trip-directions-api-key
                  key: API_KEY
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: metrics-server
#   namespace: kube-system
#   labels:
#     k8s-app: metrics-server
# spec:
#   selector:
#     matchLabels:
#       k8s-app: metrics-server
#   template:
#     metadata:
#       name: metrics-server
#       labels:
#         k8s-app: metrics-server
#     spec:
#       serviceAccountName: metrics-server
#       volumes:
#       # mount in tmp so we can safely use from-scratch images and/or read-only containers
#       - name: tmp-dir
#         emptyDir: {}
#       containers:
#       - name: metrics-server
#         image: k8s.gcr.io/metrics-server-amd64:v0.3.3
#         args: [ "--kubelet-insecure-tls" ]
#         imagePullPolicy: Always
#         volumeMounts:
#         - name: tmp-dir
#           mountPath: /tmp

